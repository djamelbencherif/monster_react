{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/sarch.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","map","el","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","this","filterdMonster","filter","toLowerCase","includes","a","fetch","data","json","users","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iWACaA,EAAO,SAACC,GACrB,OACI,sBAAKC,UAAU,OAAf,UACA,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,KAChF,6BAA4BL,EAAMG,QAAQG,MAAjCN,EAAMG,QAAQC,IACvB,4BAAIJ,EAAMG,QAAQI,YCJTC,EAAW,SAACR,GACrB,OACI,qBAAKC,UAAU,YAAf,SACSD,EAAMG,QAAQM,KAAI,SAACC,GACxB,OAAO,cAAC,EAAD,CAAMP,QAASO,GAASA,EAAGN,UCLjCO,G,MAAY,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,aACvC,OACI,qBAAKZ,UAAU,SAAf,SACA,uBACAa,KAAK,SACLF,YAAaA,EACbG,SAAUF,QCHRG,E,kDACJ,aAAe,IAAD,8BACZ,gBAOFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAPtC,EAAKC,MAAQ,CACXnB,QAAS,GACTgB,YAAa,IAJH,E,0CAYd,WACE,MAAiCI,KAAKD,MAA9BnB,EAAR,EAAQA,QAASgB,EAAjB,EAAiBA,YACXK,EAAiBrB,EAAQsB,QAAO,SAACR,GACrC,OAAOA,EAAEX,KAAKoB,cAAcC,SAASR,EAAYO,kBAEnD,OACE,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAcU,KAAKV,eAErB,cAAC,EAAD,CAAUV,QAASqB,S,sEAKzB,8BAAAI,EAAA,sEACqBC,MAAM,8CAD3B,cACQC,EADR,gBAEsBA,EAAKC,OAF3B,OAEQC,EAFR,OAGET,KAAKL,SAAS,CAAEf,QAAS6B,IAH3B,gD,2DA7BgBC,aAoCHjB,IC5BAkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.72c34461.chunk.js","sourcesContent":["import './card.style.css'\r\nexport const Card = (props)=>{\r\nreturn (\r\n    <div className=\"card\">\r\n    <img src={`https://robohash.org/${props.monster.id}?set=set2&size=380x380`} alt=\"\" />\r\n    <h1 key={props.monster.id}>{props.monster.name}</h1>\r\n    <p>{props.monster.email}</p>\r\n    </div>\r\n)\r\n}","import './card-list.style.css';\r\nimport {Card} from '../card/card.component'\r\nexport const CardList = (props)=>{\r\n    return (\r\n        <div className=\"card-list\">\r\n                {props.monster.map((el) => {\r\n            return <Card monster={el} key={el.id}/>\r\n          })}\r\n        </div>\r\n    );\r\n}","import './search.style.css';\r\nexport const SearchBox = ({placeholder,handleChange})=>{\r\nreturn (\r\n    <div className=\"search\">\r\n    <input\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n  />\r\n    </div>\r\n\r\n);\r\n}","import \"./App.css\";\nimport { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/sarch.component\";\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monster: [],\n      searchField: \"\",\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monster, searchField } = this.state;\n    const filterdMonster = monster.filter((e) => {\n      return e.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return (\n      <div className=\"App\">\n        <SearchBox\n          placeholder=\"Search monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monster={filterdMonster} />\n      </div>\n    );\n  }\n  // hook in\n  async componentDidMount() {\n    const data = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const users = await data.json();\n    this.setState({ monster: users });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App></App>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}